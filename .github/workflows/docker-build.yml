name: Build and Push Docker Image

on:
  push:
    branches: [ master ]   # Run the workflow when the code is pushed to the master branch
  pull_request:
    branches: [ master ]

jobs:
  #There are 2 jobs: build and deploy
  # The build job builds the Docker image and pushes it to Docker Hub
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Java (for building Spring Boot JAR)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Build the JAR file using Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
        #working-directory: ./Backend

      # 3.1. Verify that the jar file was created
      - name: Verify JAR file exists
        run: ls -l target
        #working-directory: ./Backend


      # 3.2. What is in the Backend directory?
      - name: Verify JAR file exists
        run: ls -l .
        #working-directory: ./Backend

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/admrestapi:latest .
        #working-directory: ./Backend

      # 5.1. Make sure the image has the app.jar file
      #- name: Verify jar inside Docker image
      #  run: docker run --rm -e ServerAddress=http://awin.dk:8000/ ${{ secrets.DOCKERHUB_USERNAME }}/admrestapi:latest ls -l /app
      #  working-directory: ./Backend

        # 6. Push image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/admrestapi:latest
          
# ________________________________________________________________________________________________
# This part is dedicated. The learning curve for AWS ECR was steep and did not get time to finish it before the assignment deadline.
      # 7 also push the image to AWS ECR
      # 1️⃣ Configure AWS credentials
      #- name: Configure AWS credentials
      #  uses: aws-actions/configure-aws-credentials@v4
      #  with:
      #    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    aws-region: ${{ secrets.AWS_AWS_REGION }}
      #
      ## 2️⃣ Login to Amazon ECR
      #- name: Login to Amazon ECR
      #  id: login-ecr
      #  uses: aws-actions/amazon-ecr-login@v2
      #
      ## 3️⃣ Build, tag, and push Docker image to ECR
      #- name: Build, tag, and push image
      #  env:
      #    AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      #    AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
      #    AWS_IMAGE_TAG: ${{ secrets.AWS_IMAGE_TAG }}
      #  run: |
      #    docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG .
      #    docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG
# ________________________________________________________________________________________________

  # The deployment job connects to the server via SSH and updates the running Docker container
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH into server and update container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          #todo: stop the container and rename the old image before downloading the new one. (do not remove the old one yet, in case the new one fails)
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/admrestapi:latest
            docker stop back || true
            docker rm back || true
            docker-compose up back -d